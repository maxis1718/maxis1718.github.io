{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["rounded","number","digits","toFixed","App","useState","current","setCurrent","expectation","setExpectation","offerCash","setOfferCash","offerRSU","setOfferRSU","stockPrice","setStockPrice","raise","offer","offerRaise","portion","cash","RSU","className","type","value","onChange","target","Number","disabled","href","rel","style","display","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b73e21b3.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\nconst rounded = (number, digits = 2) => number.toFixed(digits);\n\nfunction App() {\n  const [current, setCurrent] = useState(13000);\n  const [expectation, setExpectation] = useState(15000);\n  const [offerCash, setOfferCash] = useState(10000);\n  const [offerRSU, setOfferRSU] = useState(1500);\n  const [stockPrice, setStockPrice] = useState(186);\n  const raise = current === 0 ? 0 : expectation / current - 1;\n  const offer = offerCash + (offerRSU / 4 / 12) * stockPrice * 1.37;\n  const offerRaise = offer / current - 1;\n  const portion = {\n    cash: rounded((offerCash / offer) * 100),\n    RSU: rounded((((offerRSU / 4 / 12) * stockPrice * 1.37) / offer) * 100),\n  };\n  return (\n    <div className=\"App\">\n      <section>\n        <div className=\"block\">\n          <div>\n            Current <span>(SGD)</span>\n          </div>\n          <input\n            type=\"number\"\n            value={current}\n            onChange={({ target: { value } }) => {\n              setCurrent(Number(value));\n            }}\n          />\n        </div>\n        <div className=\"block\">\n          <div>\n            Expectation <span>(SGD)</span>\n          </div>\n          <input\n            type=\"number\"\n            value={expectation}\n            onChange={({ target: { value } }) => {\n              setExpectation(Number(value));\n            }}\n          />\n        </div>\n        <div className=\"block\">\n          <div>\n            Expected Raise <span>(%)</span>\n          </div>\n          <input value={`${rounded(raise) * 100}%`} disabled />\n        </div>\n      </section>\n      <section>\n        <div className=\"block\">\n          <div>\n            Offer: Cash <span>(SGD)</span>\n          </div>\n          <input\n            type=\"number\"\n            value={offerCash}\n            onChange={({ target: { value } }) => {\n              setOfferCash(Number(value));\n            }}\n          />\n        </div>\n        <div className=\"block\">\n          <div>\n            Offer: RSU <span>(unit)</span>\n          </div>\n          <input\n            type=\"number\"\n            value={offerRSU}\n            onChange={({ target: { value } }) => {\n              setOfferRSU(Number(value));\n            }}\n          />\n        </div>\n        <div className=\"block\">\n          <div>\n            Price{\" \"}\n            <span>\n              (\n              <a\n                href=\"https://finance.yahoo.com/quote/SE\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                SE\n              </a>\n              )\n            </span>\n          </div>\n          <input\n            type=\"number\"\n            value={stockPrice}\n            onChange={({ target: { value } }) => {\n              setStockPrice(Number(value));\n            }}\n          />\n        </div>\n        <div className=\"block\">\n          <div>\n            Composition <span>(Cash vs RSU)</span>\n          </div>\n          <div style={{ display: \"flex\" }}>\n            <span\n              className=\"portion cash\"\n              style={{ width: `${portion.cash}%` }}\n            >\n              {portion.cash}%\n            </span>\n            <span className=\"portion rsu\" style={{ width: `${portion.RSU}%` }}>\n              {portion.RSU}%\n            </span>\n          </div>\n        </div>\n        <div className=\"block\">\n          <div>\n            Offer <span>(SGD)</span>\n          </div>\n          <input value={rounded(offer)} disabled />\n        </div>\n        <div className=\"block\">\n          <div>\n            Offer <span>(%)</span>\n          </div>\n          <input value={`${rounded(offerRaise) * 100}%`} disabled />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}