{"version":3,"sources":["NumberInput.js","App.js","reportWebVitals.js","index.js"],"names":["NumberInput","autoSelect","value","onChange","inputMode","type","target","Number","onFocus","event","select","rounded","number","digits","toFixed","App","useState","current","setCurrent","expectation","setExpectation","offerCash","setOfferCash","offerRSU","setOfferRSU","stockPrice","setStockPrice","raise","offer","offerRaise","portion","cash","RSU","className","disabled","href","rel","style","display","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64a62643.chunk.js","sourcesContent":["const NumberInput = ({ autoSelect, value, onChange }) => (\n  <input\n    inputMode=\"decimal\"\n    type=\"number\"\n    value={value}\n    onChange={({ target: { value } }) => {\n      onChange(Number(value));\n    }}\n    onFocus={(event) => {\n      autoSelect && event.target.select();\n    }}\n  />\n);\nexport default NumberInput;\n","import { useState } from \"react\";\nimport NumberInput from \"./NumberInput\";\nimport \"./App.css\";\n\nconst rounded = (number, digits = 2) => number.toFixed(digits);\n\nfunction App() {\n  const [current, setCurrent] = useState(13000);\n  const [expectation, setExpectation] = useState(15000);\n  const [offerCash, setOfferCash] = useState(10000);\n  const [offerRSU, setOfferRSU] = useState(1500);\n  const [stockPrice, setStockPrice] = useState(170);\n  const raise = Number(current) === 0 ? 0 : expectation / current - 1;\n  const offer = offerCash + (offerRSU / 4 / 12) * stockPrice * 1.37;\n  const offerRaise = offer / current - 1;\n  const portion = {\n    cash: rounded((offerCash / offer) * 100),\n    RSU: rounded((((offerRSU / 4 / 12) * stockPrice * 1.37) / offer) * 100),\n  };\n  return (\n    <div className=\"App\">\n      <section>\n        <div className=\"block\">\n          <div>\n            Current <span>(SGD)</span>\n          </div>\n          <NumberInput autoSelect value={current} onChange={setCurrent} />\n        </div>\n        <div className=\"block\">\n          <div>\n            Expectation <span>(SGD)</span>\n          </div>\n          <NumberInput\n            autoSelect\n            value={expectation}\n            onChange={setExpectation}\n          />\n        </div>\n        <div className=\"block\">\n          <div>\n            Expected Raise <span>(%)</span>\n          </div>\n          <input value={`${rounded(raise) * 100}%`} disabled />\n        </div>\n      </section>\n      <section>\n        <div className=\"block\">\n          <div>\n            Offer: Cash <span>(SGD)</span>\n          </div>\n          <NumberInput autoSelect value={offerCash} onChange={setOfferCash} />\n        </div>\n        <div className=\"block\">\n          <div>\n            Offer: RSU <span>(unit)</span>\n          </div>\n          <NumberInput autoSelect value={offerRSU} onChange={setOfferRSU} />\n        </div>\n        <div className=\"block\">\n          <div>\n            Price{\" \"}\n            <span>\n              (\n              <a\n                href=\"https://finance.yahoo.com/quote/SE\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                SE\n              </a>\n              )\n            </span>\n          </div>\n          <NumberInput autoSelect value={stockPrice} onChange={setStockPrice} />\n        </div>\n        <div className=\"block\">\n          <div>Cash vs RSU</div>\n          <div style={{ display: \"flex\" }}>\n            <span\n              className=\"portion cash\"\n              style={{ width: `${portion.cash}%` }}\n            >\n              {portion.cash}%\n            </span>\n            <span className=\"portion rsu\" style={{ width: `${portion.RSU}%` }}>\n              {portion.RSU}%\n            </span>\n          </div>\n        </div>\n        <div className=\"block\">\n          <div>\n            Offer <span>(SGD)</span>\n          </div>\n          <input value={rounded(offer)} disabled />\n        </div>\n        <div className=\"block\">\n          <div>\n            Offer <span>(%)</span>\n          </div>\n          <input value={`${rounded(offerRaise) * 100}%`} disabled />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}